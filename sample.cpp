#include "mpi.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define u32 unsigned int
#define u8 unsigned char

struct ZTerm {
  u32 z[3][8];
};
struct ZPoly {
  ZTerm *p;
  int length;
};
int deg[3][1152] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,
     1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 0,
     1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
     2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2,
     3, 3, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3,
     3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 3, 3,
     2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 3, 3, 4, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 7, 7, 7,
     7, 6, 6, 6, 5, 6, 6, 6, 7, 8, 9, 9, 7, 6, 6, 7, 7, 7, 7, 7, 7, 8, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 9, 9, 10,
     10, 10, 10, 9, 9, 11, 12, 12, 11, 10, 10, 10, 9, 9, 9, 9, 10, 12, 13, 13, 12, 10, 9, 8, 9, 10, 10, 11, 11, 12, 13,
     14, 15, 13, 12, 11, 10, 10, 11, 13, 14, 15, 15, 15, 15, 15, 13, 11, 11, 11, 12, 13, 13, 15, 15, 15, 15, 15, 15, 15,
     14, 14, 14, 13, 11, 11, 11, 12, 12, 12, 11, 11, 11, 11, 12, 13, 14, 14, 14, 14, 14, 13, 12, 13, 13, 13, 14, 16, 16,
     15, 13, 12, 14, 15, 15, 16, 17, 16, 16, 15, 15, 16, 16, 17, 16, 17, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17,
     20, 22, 22, 21, 19, 18, 18, 17, 17, 19, 21, 22, 22, 22, 21, 20, 18, 18, 20, 21, 21, 21, 20, 19, 19, 19, 19, 19, 19,
     19, 18, 16, 15, 15, 15, 15, 16, 17, 18, 17, 17, 15, 14, 15, 15, 15, 16, 19, 19, 18, 17, 17, 18, 18, 18, 18, 20, 21,
     21, 20, 19, 19, 19, 19, 20, 21, 21, 22, 22, 23, 24, 24, 23, 22, 22, 21, 21, 22, 25, 27, 27, 26, 25, 24, 24, 24, 24,
     27, 28, 29, 28, 26, 25, 24, 23, 24, 27, 30, 30, 28, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 29, 30, 30, 31, 34, 35,
     35, 33, 29, 29, 29, 30, 31, 31, 32, 33, 35, 41, 42, 40, 38, 37, 37, 36, 35, 35, 36, 37, 40, 45, 47, 48, 47, 42, 40,
     40, 41, 43, 44, 43, 43, 47, 49, 50, 50, 50, 52, 53, 55, 54, 53, 51, 49, 49, 48, 49, 50, 51, 53, 53, 56, 60, 60, 58,
     56, 54, 51, 50, 51, 53, 55, 60, 62, 64, 62, 63, 60, 53, 50, 50, 53, 58, 59, 60, 62, 65, 69, 69, 67, 64, 62, 60, 59,
     60, 63, 67, 69, 71, 73, 73, 73, 71, 67, 62, 63, 65, 66, 68, 72, 74, 73, 74, 73, 74, 73, 73, 73, 74, 73, 70, 69, 69,
     71, 70, 69, 68, 66, 66, 69, 72, 77, 77, 78, 80, 82, 80, 78, 76, 77, 80, 81, 84, 85, 84, 83, 81, 78, 79, 86, 92, 94,
     91, 90, 88, 87, 85, 84},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1,
     1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,
     1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2,
     2, 2, 1, 1, 2, 2, 2, 2, 3, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 3, 3, 3, 3, 2, 3, 3, 3, 3, 4, 4, 3, 2, 2,
     3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 4, 3, 3, 3, 3, 4, 4, 5, 5,
     5, 5, 5, 4, 3, 2, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 6, 6, 6, 6, 6, 5, 5, 5, 4, 4, 6,
     7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 4, 4, 4, 4, 4, 4, 5,
     5, 5, 4, 4, 4, 4, 4, 4, 5, 6, 5, 5, 5, 6, 5, 5, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 8, 8, 7, 6, 6, 6,
     6, 7, 8, 8, 8, 7, 7, 8, 7, 8, 8, 8, 8, 8, 7, 7, 7, 6, 7, 9, 9, 9, 8, 7, 7, 8, 8, 8, 8, 8, 8, 9, 10, 10, 10, 11, 11,
     12, 12, 12, 11, 10, 9, 9, 10, 11, 11, 10, 9, 9, 12, 14, 14, 13, 13, 12, 11, 11, 11, 12, 12, 13, 15, 17, 17, 15, 12,
     11, 11, 12, 13, 13, 13, 13, 14, 17, 18, 19, 19, 19, 18, 17, 16, 17, 17, 18, 18, 19, 19, 19, 19, 17, 16, 16, 19, 21,
     21, 20, 19, 19, 19, 18, 18, 18, 19, 22, 22, 22, 21, 20, 17, 16, 16, 18, 18, 18, 18, 19, 20, 21, 23, 22, 22, 21, 19,
     18, 18, 20, 22, 23, 23, 24, 25, 25, 23, 21, 19, 19, 21, 22, 23, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 23, 22,
     22, 23, 23, 23, 23, 22, 21, 20, 23, 25, 26, 28, 28, 26, 25, 24, 23, 23, 25, 26, 27, 29, 30, 29, 27, 24, 25, 27, 28,
     29, 30, 29, 29, 29, 29, 30, 31, 31, 29, 29, 28, 28, 31, 31, 32, 32, 32, 32, 33, 32, 29, 29, 31, 34, 36, 38, 36, 34,
     34, 34, 32, 35, 37, 38, 38, 38, 36, 35, 32, 31, 32, 34, 35, 34, 33, 32, 32, 33, 34, 34, 34, 34, 34, 33, 30, 28, 28,
     29, 30, 32, 33, 34, 33, 31, 29, 29, 30, 30, 31, 35, 36, 35, 35, 34, 34, 34, 35, 35, 36, 38, 39, 39, 38, 37, 37, 37,
     38, 39, 38, 39, 40, 43, 46, 46, 46, 44, 42, 40, 39, 39, 43, 48, 50, 50, 49, 46, 48, 48, 48, 51, 53, 52, 51, 50, 48,
     48, 47, 47, 51, 57, 59, 56, 51, 49, 51, 54, 54, 54, 53, 53, 55, 56, 57, 59, 60, 61, 65, 68, 68, 66, 62, 58, 58, 59,
     60, 62, 63, 64, 66, 73, 79, 82, 77, 74, 70, 67, 66, 66, 68, 70, 75, 84, 91, 92, 88, 82, 75, 73, 74, 77, 79, 80, 81,
     85, 89, 93, 94, 94, 95, 94, 94, 92, 91, 92, 93, 93, 95, 95, 96, 96, 97, 94, 94, 97, 100, 100, 100, 100},
    {0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,
     0, 1, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 1, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 3, 2, 2, 2, 2, 3, 3, 2, 2,
     2, 3, 4, 4, 4, 4, 3, 3, 3, 2, 3, 3, 3, 4, 5, 5, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5,
     5, 6, 6, 6, 5, 4, 5, 7, 7, 7, 7, 6, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 6, 5, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 7, 6,
     5, 5, 6, 7, 8, 9, 9, 9, 9, 8, 7, 5, 6, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 6, 6,
     7, 7, 7, 8, 8, 8, 7, 7, 7, 8, 8, 8, 9, 10, 9, 8, 7, 7, 8, 8, 8, 9, 10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10,
     11, 11, 11, 10, 10, 9, 8, 8, 10, 12, 13, 13, 12, 11, 11, 10, 9, 10, 11, 13, 13, 13, 12, 12, 12, 11, 12, 12, 12, 11,
     11, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 7, 8, 8, 8, 8, 9, 10, 10, 9, 8, 8, 8, 8, 8, 9, 11, 11, 10, 9, 10, 10, 9,
     9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13, 14, 14, 14, 13, 12, 11, 11, 10, 12, 14, 15, 15, 14, 14,
     14, 14, 14, 15, 15, 15, 15, 15, 14, 14, 13, 13, 15, 16, 16, 15, 14, 13, 14, 15, 15, 15, 15, 14, 15, 16, 16, 16, 18,
     19, 20, 21, 21, 20, 17, 16, 16, 17, 19, 19, 19, 18, 17, 20, 24, 24, 24, 24, 23, 22, 22, 21, 21, 22, 22, 24, 27, 28,
     27, 24, 21, 22, 23, 25, 25, 25, 24, 24, 27, 28, 29, 30, 30, 31, 30, 30, 30, 29, 29, 28, 29, 29, 30, 31, 31, 30, 29,
     32, 35, 37, 34, 32, 31, 30, 30, 31, 32, 33, 37, 38, 38, 37, 35, 32, 29, 28, 30, 32, 33, 34, 34, 34, 36, 38, 38, 38,
     37, 36, 34, 33, 34, 34, 36, 39, 40, 40, 40, 39, 37, 35, 34, 34, 36, 38, 41, 42, 42, 40, 40, 40, 41, 42, 41, 42, 43,
     40, 41, 40, 41, 43, 43, 42, 40, 39, 39, 40, 42, 45, 46, 47, 47, 47, 45, 44, 43, 44, 47, 48, 51, 52, 50, 48, 46, 44,
     46, 49, 50, 52, 51, 51, 51, 50, 48, 50, 53, 55, 54, 52, 50, 52, 54, 57, 57, 56, 56, 55, 54, 52, 51, 52, 59, 65, 67,
     68, 65, 61, 58, 55, 55, 59, 64, 66, 68, 66, 64, 63, 62, 62, 64, 65, 63, 62, 60, 58, 57, 56, 57, 58, 58, 58, 56, 55,
     51, 51, 53, 56, 59, 62, 63, 60, 58, 55, 52, 54, 56, 57, 62, 67, 67, 64, 61, 59, 62, 64, 65, 67, 71, 71, 71, 70, 69,
     69, 69, 70, 70, 71, 71, 74, 76, 78, 80, 80, 79, 78, 76, 73, 71, 74, 82, 88, 92, 89, 85, 83, 82, 82, 83, 90, 93, 94,
     91, 89, 86}
};
int SNum[3][341] = {
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 1, 3, 1,
     2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 2, 1, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 3, 3, 4, 2, 3, 1, 4, 1,
     4, 2, 5, 2, 3, 5, 4, 4, 4, 4, 4, 5, 3, 4, 3, 6, 4, 6, 5, 5, 4, 3, 3, 5, 6, 7, 7, 5, 4, 6, 5, 5, 5, 5, 6, 7, 9, 11,
     7, 7, 5, 6, 4, 6, 8, 7, 7, 8, 10, 13, 10, 9, 7, 6, 7, 6, 8, 10, 14, 14, 13, 16, 15, 14, 9, 10, 7, 13, 11, 16, 17,
     19, 20, 15, 21, 15, 20, 15, 18, 17, 15, 14, 13, 16, 16, 17, 18, 23, 21, 18, 16, 20, 20, 20, 21, 23, 19, 17, 14, 15,
     15, 27, 29, 21, 22, 25, 29, 22, 22, 18, 24, 23, 22, 29, 32, 38, 25, 27, 24, 22, 21, 16, 31, 37, 40, 38, 40, 46, 42,
     35, 33, 35, 36, 33, 35, 49, 63, 71, 65, 60, 57, 51, 45, 38, 42, 57, 69, 75, 75, 72, 64, 55, 45, 45, 53, 60, 59, 53,
     37, 43, 41, 43, 37, 44, 43, 43, 39, 27, 32, 35, 51, 48, 44, 43, 50, 47, 36, 41, 48, 56, 54, 48, 57, 60, 64, 50, 51,
     53, 57, 63, 45, 60, 77, 89, 78, 83, 80, 94, 78, 83, 92, 111, 125, 86, 120, 132, 147, 140, 126, 132, 141, 151, 137,
     145, 224, 244, 200, 199, 198, 225, 206, 192, 231, 297, 396, 378, 332},
    {1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2,
     2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
     2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 3, 1, 3, 2, 4, 2, 2, 4, 2, 2, 2, 2, 3, 3, 3, 3, 2, 4, 2,
     4, 2, 3, 3, 2, 2, 3, 3, 6, 3, 6, 4, 4, 5, 4, 6, 3, 5, 5, 6, 7, 8, 6, 5, 5, 5, 7, 4, 8, 4, 7, 4, 5, 11, 10, 10, 8,
     6, 8, 7, 8, 7, 8, 8, 8, 11, 15, 17, 11, 9, 7, 10, 10, 14, 15, 18, 14, 16, 20, 25, 21, 20, 22, 23, 29, 26, 19, 21,
     21, 29, 26, 35, 31, 25, 20, 18, 25, 41, 45, 55, 39, 26, 30, 34, 33, 32, 35, 41, 52, 71, 88, 72, 52, 40, 34, 30, 32,
     58, 64, 54, 64, 85, 119, 113, 88, 73, 48, 52, 46, 53, 80, 123, 160, 135, 162, 198, 182, 120, 86, 73, 88, 119, 131,
     197, 246, 284, 216, 235, 241, 232, 236, 198, 245, 213, 196, 157, 170, 209, 225, 253, 297, 333, 273, 234, 219, 292,
     329, 359, 390, 336, 244, 235, 206, 210, 299, 496, 454, 395, 471, 588, 516, 393, 291, 333, 387, 414, 493, 614, 689,
     576, 519, 530, 449, 405, 318, 403, 613, 703, 767, 875, 1057, 1127, 951, 884, 870, 913, 712, 731, 896},
    {0, 1, 1, 1, 1, 3, 1, 1, 3, 1, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 2, 1, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 3,
     1, 2, 3, 3, 3, 2, 3, 1, 3, 1, 3, 2, 3, 2, 3, 3, 3, 3, 3, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 2, 4, 3, 4,
     3, 4, 3, 4, 3, 4, 3, 4, 3, 2, 4, 2, 4, 2, 4, 3, 5, 3, 3, 4, 4, 3, 3, 3, 4, 3, 2, 3, 2, 5, 4, 5, 2, 4, 3, 4, 3, 4,
     3, 5, 3, 4, 5, 5, 8, 3, 6, 2, 6, 2, 5, 5, 6, 6, 5, 7, 6, 7, 4, 5, 4, 6, 4, 6, 7, 9, 8, 8, 7, 7, 6, 5, 4, 6, 7, 9,
     8, 9, 8, 8, 7, 6, 7, 7, 8, 6, 6, 4, 7, 4, 6, 4, 6, 5, 6, 5, 4, 5, 5, 5, 4, 5, 5, 6, 3, 4, 5, 6, 6, 5, 4, 6, 4, 5,
     4, 5, 6, 6, 6, 4, 7, 7, 9, 5, 7, 4, 9, 4, 8, 7, 10, 10, 6, 12, 7, 11, 5, 8, 8, 11, 10, 9, 13, 16, 16, 11, 14, 14,
     12, 9, 11, 15, 20, 21, 20, 17, 19, 17, 17, 15, 15, 18, 16, 17, 18, 19, 26, 23, 24, 26, 20, 31, 23, 28, 21, 22, 27,
     25, 39, 51, 46, 34, 25, 27, 37, 29, 36, 29, 32, 32, 27, 59, 90, 80, 72, 45, 52, 56, 60, 61, 64, 69, 69, 95, 142,
     178, 139, 93, 70, 84, 103, 135, 193, 202, 174, 168, 254, 266, 278, 271, 274, 339, 459, 522, 384, 303, 276, 293,
     349, 390, 537, 445, 342, 297, 377, 680, 959, 1123, 900, 507, 513, 465, 582, 641, 716, 903, 1242, 1857, 2616, 2066,
     1546, 925, 616, 555, 535, 1102, 1626, 1796, 1784, 2342, 3599, 3676, 3500, 2572, 1754}
};

int DegRed[3][800] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
     1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
     1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0,
     1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0,
     0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1,
     0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 3, 4, 2, 2, 1, 0, 0, 0, 0, 1, 2,
     2, 4, 4, 3, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 4, 4, 4, 2, 1, 1, 0, 1, 2, 2, 3, 4, 6, 6, 6, 5, 3, 2, 2, 2, 3, 4, 6, 6,
     6, 5, 5, 5, 5, 3, 3, 3, 2, 3, 3, 3, 5, 5, 5, 5, 5, 5, 4, 3, 3, 3, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 2,
     3, 2, 2, 1, 0, 0, 0, 1, 3, 3, 1, 0, 0, 2, 3, 3, 3, 4, 3, 1, 0, 0, 0, 2, 3, 3, 6, 7, 4, 0, 0, 0, 0, 0, 0, 2, 4, 4,
     6, 8, 8, 6, 4, 2, 1, 0, 0, 0, 1, 2, 4, 6, 7, 6, 4, 3, 4, 5, 6, 8, 8, 7, 6, 5, 4, 4, 4, 4, 3, 1, 1, 2, 2, 1, 1, 1,
     2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 2, 3, 4, 4, 3, 2, 0, 0, 0, 1, 2,
     3, 4, 4, 4, 3, 1, 0, 0, 0, 0, 0, 0, 2, 5, 6, 5, 4, 2, 1, 0, 0, 0, 1, 2, 3, 4, 4, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 0, 1, 3, 4, 4, 3, 2, 2, 2, 0, 0, 2, 5, 6, 8, 10, 11, 11, 10, 7, 4,
     5, 7, 6, 3, 2, 3, 7, 12, 17, 15, 11, 6, 2, 0, 0, 0, 0, 4, 10, 15, 19, 20, 15, 9, 3, 0, 0, 1, 4, 8, 10, 14, 16, 15,
     16, 17, 11, 6, 5, 3, 7, 12, 14, 17, 21, 22, 19, 15, 12, 12, 10, 12, 13, 13, 17, 19, 21, 21, 19, 18, 18, 19, 17, 14,
     13, 11, 9, 11, 16, 18, 17, 17, 16, 15, 15, 14, 15, 15, 11, 8, 8, 9, 11, 9, 5, 1, 0, 4, 6, 7, 4, 2, 3, 10, 16, 17,
     14, 13, 14, 11, 8, 6, 3, 6, 7, 10, 13, 15, 20, 23, 23, 23, 23, 18, 11, 2},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
     1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0,
     0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 1, 1, 2, 2,
     1, 1, 1, 0, 0, 0, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 0, 0, 1,
     1, 1, 1, 1, 1, 2, 3, 3, 3, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2, 2, 1, 1, 1, 2,
     1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 4, 3, 3, 3, 3,
     3, 3, 4, 3, 2, 2, 2, 3, 2, 1, 1, 1, 2, 4, 3, 2, 2, 1, 0, 1, 2, 2, 3, 4, 5, 6, 4, 3, 2, 0, 0, 0, 0, 1, 2, 2, 4, 7,
     8, 8, 8, 5, 4, 2, 2, 4, 6, 8, 8, 9, 8, 7, 5, 3, 2, 1, 2, 4, 6, 7, 7, 8, 7, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4,
     2, 1, 2, 4, 4, 5, 6, 5, 4, 3, 2, 3, 4, 6, 6, 5, 4, 4, 5, 5, 5, 4, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 4, 4, 6,
     4, 4, 4, 3, 3, 4, 5, 4, 2, 3, 6, 6, 8, 9, 7, 4, 4, 2, 3, 4, 4, 5, 5, 7, 8, 6, 5, 5, 6, 5, 6, 6, 5, 4, 6, 8, 11, 11,
     9, 5, 3, 1, 0, 3, 6, 6, 7, 8, 8, 10, 11, 9, 7, 7, 4, 3, 6, 6, 5, 7, 10, 11, 12, 13, 11, 10, 8, 5, 3, 1, 0, 0, 0, 3,
     5, 5, 5, 5, 8, 11, 11, 10, 10, 10, 11, 8, 6, 5, 4, 3, 3, 3, 4, 7, 6, 5, 6, 5, 4, 4, 4, 4, 4, 6, 8, 9, 6, 5, 5, 4,
     3, 6, 7, 7, 6, 5, 5, 5, 7, 6, 6, 5, 7, 11, 12, 12, 11, 8, 6, 6, 7, 8, 8, 10, 8, 10, 10, 11, 14, 14, 16, 14, 12, 8,
     8, 8, 10, 13, 15, 16, 19, 22, 21, 16, 12, 8, 9, 12, 14, 15, 15, 16, 19, 21, 22, 23, 21, 20, 19, 19, 17, 18, 18, 18,
     18, 17, 17, 18, 19, 18, 16, 20, 28, 27, 21, 16, 8, 6, 8, 10, 14, 19, 25, 35, 39, 34, 22, 15, 12, 7, 7, 9, 14, 19,
     22, 27, 33, 35, 33, 29, 24, 18, 16, 14, 18, 25, 35, 40, 40, 36, 33, 30, 25, 22, 21, 17, 14, 18, 24},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0,
     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,
     0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 2,
     2, 2, 2, 1, 0, 0, 1, 1, 1, 2, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 3, 3, 3, 2, 1,
     0, 0, 0, 1, 2, 3, 3, 3, 2, 1, 0, 0, 2, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 2, 3, 3, 3, 4, 3, 3, 3, 2, 1, 1,
     1, 0, 1, 2, 2, 1, 1, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 2, 4, 3, 3, 3, 3, 3, 1, 2, 2, 3, 2, 3, 4, 5, 5, 4,
     3, 2, 0, 0, 1, 2, 3, 4, 4, 4, 4, 3, 2, 2, 2, 2, 4, 4, 3, 3, 4, 5, 5, 4, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
     0, 1, 1, 0, 0, 1, 3, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 2, 2, 2, 1, 0, 0, 0, 1, 1, 2, 3, 3, 3, 3, 2, 1, 1, 1, 3, 4, 4,
     4, 4, 3, 1, 1, 0, 0, 1, 2, 3, 3, 3, 4, 4, 5, 5, 2, 1, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 1, 0, 0, 2, 3, 3, 3, 2, 2, 3,
     4, 3, 5, 8, 8, 7, 7, 6, 4, 4, 3, 3, 6, 7, 7, 5, 2, 2, 3, 6, 8, 10, 10, 8, 8, 8, 7, 7, 7, 6, 6, 8, 7, 4, 3, 3, 5, 7,
     7, 6, 6, 5, 4, 6, 7, 9, 10, 9, 7, 4, 6, 5, 7, 8, 8, 10, 10, 11, 11, 8, 6, 5, 7, 12, 13, 10, 9, 10, 10, 10, 10, 10,
     10, 13, 9, 9, 7, 6, 7, 7, 8, 9, 7, 8, 8, 6, 5, 5, 6, 9, 9, 11, 10, 8, 7, 5, 3, 6, 8, 7, 7, 6, 5, 5, 7, 5, 5, 6, 9,
     10, 9, 7, 5, 5, 6, 9, 10, 10, 10, 8, 11, 12, 12, 13, 16, 16, 14, 13, 12, 10, 10, 10, 14, 15, 14, 12, 12, 11, 10,
     10, 11, 14, 14, 15, 12, 11, 11, 12, 11, 9, 7, 6, 10, 12, 14, 14, 13, 13, 14, 14, 12, 10, 8, 6, 7, 14, 20, 21, 20,
     19, 14, 8, 7, 5, 8, 16, 20, 23, 25, 22, 17, 16, 14, 14, 14, 18, 19, 20, 17, 20, 23, 26, 26, 27, 22, 18, 13, 11, 11,
     11, 11, 12, 6, 6, 5, 4, 4, 5, 6, 10, 12, 13, 16, 17, 16, 14, 10, 9, 8, 8, 9, 13, 17, 15, 14, 15, 14, 15, 15, 14,
     15, 17, 19, 21, 19, 17, 15, 15, 13, 12, 14, 15, 16, 18, 19, 19, 22, 21, 19, 17, 13, 13, 15, 20, 27, 29, 25, 23, 22,
     22, 23, 25, 25, 22, 20, 18, 17}
};

u32 COVER[3][341][3] = {
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
     {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
     {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
     {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
     {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
     {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
     {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 16}, {0, 0, 0}, {0, 0, 4},
     {0, 0, 0}, {0, 0, 32769}, {0, 0, 0}, {0, 0, 0}, {0, 536870912, 4096}, {0, 0, 0}, {0, 0, 1024}, {0, 0, 0},
     {0, 0, 256}, {0, 16777216, 0}, {0, 0, 64}, {0, 4194304, 0}, {0, 0, 16}, {0, 0, 0}, {0, 524288, 4}, {0, 0, 0},
     {0, 131072, 1}, {0, 0, 0}, {0, 32768, 0}, {0, 536870912, 0}, {0, 0, 0}, {0, 4096, 0}, {0, 0, 0}, {0, 1024, 0},
     {0, 16777728, 0}, {0, 256, 0}, {0, 4194304, 0}, {0, 64, 0}, {0, 0, 0}, {0, 524304, 0}, {0, 0, 0}, {0, 131076, 0},
     {0, 0, 0}, {0, 32769, 0}, {0, 0, 0}, {1073741824, 0, 0}, {536870912, 4096, 0}, {268435456, 1536, 0},
     {134217728, 1792, 0}, {0, 512, 0}, {33554432, 256, 0}, {0, 0, 0}, {8388608, 64, 16}, {0, 0, 0}, {2097152, 16, 4},
     {1048576, 0, 0}, {524288, 4, 32769}, {262144, 0, 0}, {131072, 1, 0}, {1610678272, 536870912, 4096},
     {1879080960, 0, 0}, {939524096, 0, 1024}, {268443648, 16777216, 256}, {134217728, 16777216, 320},
     {2048, 20971520, 64}, {33555456, 4194304, 80}, {512, 4194304, 0}, {8388864, 0, 16}, {3145856, 0, 0},
     {3670080, 524288, 4}, {1835040, 0, 0}, {917520, 131072, 1}, {458760, 536903680, 0}, {229380, 32768, 0},
     {65538, 536870912, 0}, {32769, 0, 0}, {0, 4096, 16}, {8192, 16778752, 4096}, {3072, 16779008, 4},
     {3584, 20972288, 1024}, {1792, 4194624, 32769}, {896, 4194304, 256}, {448, 64, 0}, {224, 536870912, 4160},
     {112, 524304, 0}, {56, 0, 1040}, {28, 131076, 0}, {14, 0, 260}, {7, 16809985, 0}, {1610612739, 4096, 65},
     {1879048193, 4199936, 4096}, {939524096, 5888, 4112}, {402653184, 536871680, 5120}, {167772160, 525824, 1028},
     {0, 512, 1296}, {33554432, 131328, 257}, {0, 0, 324}, {8388608, 16810048, 64}, {3145728, 536870928, 32849},
     {3670016, 4194324, 16}, {1835008, 4100, 20}, {917504, 536870917, 4100}, {1611071488, 525313, 5},
     {1879277568, 16777729, 1025}, {2013364224, 131328, 1}, {2013306880, 541065216, 256}, {671096832, 553680960, 0},
     {402663424, 536870912, 64}, {167775232, 4718608, 0}, {33558016, 4096, 16}, {41944832, 16908292, 0},
     {11535232, 17302528, 4}, {12059072, 21004801, 0}, {3932384, 4325632, 1}, {1077805168, 4194304, 0},
     {538902584, 561216, 0}, {269451292, 537396736, 0}, {134709262, 657168, 0}, {229383, 135680, 0},
     {33652739, 164100, 0}, {40961, 33792, 4096}, {8399872, 16810561, 4112}, {11776, 4352, 5120},
     {1075842816, 4198416, 1028}, {537923456, 5184, 1280}, {268961728, 1540, 33025}, {134480864, 526096, 320},
     {131568, 769, 64}, {1644232952, 537002308, 4176}, {1879081084, 64, 16}, {947912766, 32849, 1044},
     {268443679, 16777232, 260}, {1210056719, 16777236, 325}, {537921543, 20975620, 4161}, {302515203, 4195845, 4177},
     {134480385, 541067009, 5120}, {1082261760, 536871425, 5136}, {1647378560, 536871168, 5392},
     {1882751040, 524288, 1300}, {949747744, 64, 1364}, {403578896, 16908288, 325}, {170328072, 553680912, 33109},
     {34834436, 21004288, 32849}, {42533890, 541065220, 32853}, {8684033, 541065216, 4116}, {10617088, 537399297, 4101},
     {1613832320, 554173952, 1029}, {1882754112, 17434368, 1025}, {941362720, 557974272, 257},
     {269362960, 558006592, 33024}, {134677384, 557875200, 64}, {231876, 557875264, 64}, {33653986, 4198400, 4112},
     {41585, 21499920, 16}, {8397112, 17306624, 1028}, {3156124, 21628420, 4100}, {3673166, 21628672, 257},
     {1838631, 4358913, 1025}, {1611532051, 4886848, 64}, {1879507849, 537433664, 4352}, {939753924, 537565008, 4112},
     {402718946, 660240, 5184}, {167805041, 169492, 1028}, {56, 169476, 1280}, {33562652, 16811781, 4353},
     {3086, 16815873, 320}, {1082134023, 4199233, 1088}, {1613760259, 541070672, 32848}, {1882719105, 5716, 4368},
     {941359552, 526164, 4116}, {403570912, 526101, 1092}, {1778843760, 131925, 1029}, {1912832056, 16908613, 273},
     {2055307292, 32853, 257}, {2021695502, 541098065, 68}, {1755324423, 536870933, 64}, {2016421891, 536875028, 17},
     {2050493441, 529925, 4112}, {974917120, 1797, 4100}, {1519257344, 553780993, 5124}, {1790378880, 16777985, 1025},
     {1924891072, 21004544, 1297}, {2059239648, 4194368, 256}, {952017008, 541065280, 324}, {448733240, 554176528, 64},
     {171943964, 525840, 32849}, {46107662, 4851460, 16}, {44011015, 131588, 20}, {11503363, 553812225, 4100},
     {1622647681, 17334273, 4101}, {1882959296, 4227136, 5137}, {2017308384, 4329472, 5121},
     {941535088, 536875024, 1284}, {403648440, 554210304, 1280}, {134721500, 537396740, 33089},
     {33787886, 4327168, 320}, {33665015, 135937, 80}, {1619044347, 553681216, 4176}, {1890593789, 17335360, 4116},
     {943205886, 20972112, 5140}, {272371455, 21106960, 5381}, {136187775, 20975636, 1349}, {985023, 21529668, 5441},
     {34046943, 541591045, 4433}, {229871, 541721361, 5440}, {1082228983, 537006337, 5200},
     {1613791355, 537034820, 5456}, {1882726461, 558144, 5396}, {941370398, 16810513, 5460},
     {403574287, 16912656, 5445}, {1241976583, 557879300, 34133}, {570656643, 21009476, 38225},
     {310444993, 541066753, 4437}, {142639584, 541591313, 5460}, {1084227824, 537400064, 5189},
     {1647321208, 554305348, 1365}, {808979516, 17434432, 1297}, {412880414, 558007121, 341},
     {135137039, 558006608, 33092}, {1109853063, 557875220, 85}, {571703747, 557879364, 4177},
     {277446881, 4199941, 4117}, {142909552, 558372625, 5140}, {1075978296, 554178049, 5141},
     {1647388700, 558499588, 1301}, {1880656910, 21628672, 34069}, {948702727, 541229889, 33109},
     {2013669123, 558534976, 33093}, {2049115009, 554210896, 36949}, {974227904, 558536528, 36945},
     {445154528, 541725460, 33813}, {176431728, 558011924, 5140}, {10625336, 554341893, 4373},
     {1647380636, 558401285, 5397}, {1882754126, 21665537, 1109}, {2023491111, 557978433, 1365},
     {1883120403, 558536016, 33045}, {2017395081, 558405204, 37205}, {941590724, 558532436, 36933},
     {437224546, 541726485, 33877}, {1778885169, 558535509, 5137}, {1921229080, 554341701, 4373},
     {2058463372, 558532181, 1284}, {2025368646, 558536529, 1093}, {1757163043, 558011157, 321},
     {2017341201, 21665108, 273}, {2050953096, 558405189, 4176}, {975146948, 558536533, 4180},
     {1519323106, 558503697, 1044}, {1790411761, 21665621, 1045}, {1924891128, 4888388, 33029},
     {2059247868, 21661525, 37141}, {952020094, 554342225, 32849}, {1522478655, 558535509, 37957},
     {1782558495, 541759316, 4116}, {1925156751, 541235029, 38161}, {983535559, 537565013, 37893},
     {1487898595, 17340181, 5444}, {1790419953, 554342229, 5377}, {1916513784, 557979461, 5441},
     {2059251452, 21141333, 5440}, {2023665534, 557881169, 1360}, {2058301375, 541624149, 1360},
     {2050469855, 21501780, 33108}, {2059112431, 17438549, 4436}, {983412727, 4855637, 4181},
     {2058266619, 21661525, 1109}, {2058824701, 16942933, 5141}, {2059120126, 541754133, 37125},
     {2059243263, 558403925, 38149}, {2025762687, 553816133, 33857}, {2059347903, 541725781, 38209},
     {2050993119, 541627921, 37136}, {2059374063, 553817877, 5456}, {2057285367, 553780996, 5188},
     {2059380603, 21010245, 1364}, {2059381693, 21009217, 5393}, {2059382238, 20972881, 4437},
     {2059382511, 21501520, 5460}, {2059382647, 558404436, 33877}, {985640891, 541721876, 38229}},
    {{1, 0, 0}, {0, 0, 0}, {0, 0, 4096}, {0, 0, 0}, {0, 0, 1024}, {0, 0, 0}, {0, 0, 256}, {0, 0, 0}, {0, 0, 64},
     {0, 0, 0}, {0, 0, 16}, {0, 0, 0}, {0, 0, 4}, {0, 0, 0}, {0, 0, 1}, {0, 0, 0}, {0, 0, 0}, {0, 536870912, 0},
     {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 16777216, 0}, {0, 0, 0}, {0, 4194304, 0}, {0, 0, 0}, {0, 0, 0},
     {0, 524288, 0}, {0, 0, 0}, {0, 131072, 0}, {0, 0, 0}, {0, 32768, 0}, {0, 0, 0}, {0, 0, 0}, {0, 4096, 0}, {0, 0, 0},
     {0, 1024, 0}, {0, 512, 0}, {0, 256, 0}, {0, 0, 0}, {0, 64, 0}, {0, 0, 0}, {0, 16, 0}, {0, 0, 0}, {0, 4, 0},
     {0, 0, 0}, {0, 1, 0}, {0, 0, 0}, {1073741824, 0, 0}, {536870912, 0, 0}, {268435456, 0, 0}, {134217728, 0, 0},
     {0, 0, 0}, {33554432, 0, 0}, {0, 0, 0}, {8388608, 0, 0}, {0, 0, 0}, {2097152, 0, 0}, {1048576, 0, 0},
     {524288, 0, 0}, {262144, 0, 0}, {131072, 0, 0}, {65536, 0, 0}, {32768, 0, 0}, {0, 0, 0}, {8192, 0, 0}, {0, 0, 0},
     {2048, 0, 0}, {1024, 0, 0}, {512, 0, 0}, {256, 0, 0}, {128, 0, 0}, {64, 0, 0}, {32, 0, 0}, {16, 0, 0}, {8, 0, 0},
     {4, 0, 0}, {2, 0, 0}, {1, 0, 0}, {0, 0, 0}, {0, 0, 4096}, {0, 0, 0}, {0, 0, 1024}, {0, 0, 0}, {0, 0, 256},
     {0, 0, 0}, {0, 0, 64}, {0, 0, 0}, {0, 0, 16}, {0, 0, 0}, {0, 0, 4}, {0, 0, 0}, {0, 0, 1}, {0, 0, 0}, {0, 0, 0},
     {0, 536870912, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 16777216, 0}, {0, 0, 0}, {0, 4194304, 0},
     {0, 0, 0}, {0, 0, 0}, {0, 524288, 0}, {0, 0, 0}, {0, 131072, 0}, {0, 0, 0}, {0, 32768, 0}, {0, 0, 0}, {0, 0, 0},
     {0, 4096, 0}, {0, 0, 0}, {0, 1024, 0}, {0, 512, 0}, {0, 256, 0}, {0, 0, 0}, {0, 64, 0}, {0, 0, 0}, {0, 16, 0},
     {0, 0, 0}, {0, 4, 0}, {0, 0, 0}, {0, 1, 0}, {0, 0, 0}, {1073741824, 0, 0}, {536870912, 0, 0}, {268435456, 0, 0},
     {134217728, 0, 0}, {0, 0, 0}, {33554432, 0, 0}, {0, 0, 0}, {8388608, 0, 16}, {0, 0, 0}, {2097152, 0, 4},
     {1048576, 0, 0}, {524288, 0, 32769}, {262144, 0, 0}, {131072, 0, 0}, {65536, 536870912, 4096}, {32768, 0, 0},
     {0, 0, 1024}, {8192, 0, 0}, {0, 0, 256}, {2048, 16777216, 0}, {1024, 0, 64}, {512, 4194304, 0}, {256, 0, 16},
     {128, 0, 0}, {64, 524288, 4}, {32, 0, 0}, {16, 131072, 1}, {8, 0, 0}, {4, 32768, 0}, {2, 536870912, 0}, {1, 0, 0},
     {0, 4096, 0}, {0, 0, 4112}, {0, 1024, 16}, {0, 16777728, 1044}, {0, 256, 4}, {0, 4194304, 33029}, {0, 64, 32769},
     {0, 0, 32833}, {0, 537395216, 4096}, {0, 536870912, 4112}, {0, 537001988, 5120}, {0, 0, 1028}, {0, 32769, 1280},
     {0, 16777216, 257}, {1073741824, 16777216, 320}, {536870912, 20975616, 64}, {268435456, 541066752, 80},
     {134217728, 4196096, 16}, {0, 524800, 20}, {33554432, 524544, 4}, {0, 655360, 5}, {8388608, 16908352, 17},
     {0, 163840, 1}, {2097152, 541098000, 4}, {1048576, 536903680, 0}, {524288, 536875012, 32769}, {262144, 528384, 0},
     {131072, 5121, 0}, {1610678272, 553780736, 4096}, {1879080960, 16779008, 0}, {939524096, 21005056, 1024},
     {268443648, 20971840, 256}, {134217728, 20971584, 320}, {2048, 21499984, 64}, {33555456, 4718608, 80},
     {512, 4850708, 0}, {8388864, 131588, 16}, {3145856, 164101, 0}, {3670080, 557057, 4}, {1075576864, 32833, 0},
     {1611530256, 135168, 1}, {1879506952, 536909328, 0}, {939753476, 38656, 0}, {402718722, 536872708, 0},
     {167804929, 1792, 0}, {33554432, 4865, 16}, {41951232, 16779072, 4112}, {1082133504, 16779072, 20},
     {547360256, 20972368, 1044}, {271582976, 4194640, 32773}, {137888640, 4194324, 33029}, {1835456, 68, 32769},
     {34472160, 536870917, 36929}, {1611071600, 537395217, 4096}, {1887666232, 536870913, 5120},
     {2013364252, 537001988, 5120}, {2015404046, 16777216, 1280}, {940580871, 16809985, 1344},
     {2013800451, 20975616, 33088}, {2047085569, 20977152, 4432}, {973213184, 20977408, 4176},
     {444663552, 4195072, 1104}, {179340160, 4720128, 1044}, {12059072, 524800, 260}, {37495008, 655616, 261},
     {4063344, 655360, 65}, {10422328, 537034816, 65}, {4162588, 537034768, 32784}, {4162062, 536903700, 16},
     {2064647, 536907780, 4}, {1015939, 4101, 4116}, {1611112513, 16782849, 4113}, {1879288864, 16783105, 5141},
     {2013376016, 20973312, 5124}, {2013310728, 557844288, 34053}, {671100804, 541066048, 34049},
     {402665410, 4194624, 33089}, {167776225, 537395280, 4416}, {33558512, 537395280, 4176},
     {41945080, 554303508, 1104}, {11535356, 16908308, 1044}, {12059134, 4358149, 260}, {3932415, 21004293, 261},
     {1614676095, 16814081, 32833}, {1881079871, 21501441, 36929}, {2014281759, 541595392, 36880},
     {2013757455, 541202176, 5136}, {973307911, 537528064, 5124}, {436305923, 558848, 1300}, {167813121, 688896, 5393},
     {41954304, 16908608, 4421}, {41954816, 16945216, 5444}, {11538176, 557879376, 33873}, {12062592, 541099028, 34129},
     {3934144, 4199956, 276}, {4064224, 537400069, 4436}, {1612644848, 537400581, 4165}, {1880064248, 17434177, 1109},
     {2013757564, 16910145, 1041}, {2013503550, 541229840, 261}, {2013372447, 557875536, 260},
     {939567119, 553680964, 65}, {436218887, 541593684, 4161}, {167783939, 4724241, 36880}, {41946881, 553785109, 5136},
     {1118834560, 554305028, 5124}, {1622673344, 21530373, 1300}, {817628128, 21136129, 1297},
     {1480458736, 4325697, 341}, {1748959480, 21532736, 324}, {1914667132, 554210896, 32853},
     {974094398, 541722384, 32849}, {411533343, 4855572, 32789}, {176390159, 537039620, 4116},
     {35758087, 537560325, 4117}, {1655745539, 554206785, 5141}, {1889021441, 16945985, 5141},
     {2024550144, 541200656, 5397}, {1882591104, 557880400, 38149}, {943394752, 553686596, 34117},
     {404588512, 558368532, 34113}, {168723440, 541595409, 37201}, {1644634616, 557978437, 4432},
     {1921229052, 554304836, 5204}, {2024900734, 558401105, 5204}, {951626815, 21660497, 1301},
     {1480336927, 21102868, 1349}, {1748904719, 21663828, 37189}, {840895879, 558405189, 37201},
     {437227203, 558532373, 37969}, {1216808801, 541726481, 37968}, {1655931824, 541758213, 5396},
     {1916371416, 537564420, 5396}, {2025627884, 17466945, 5461}, {949890166, 17471297, 1365},
     {1513041467, 558011152, 34133}, {1782026013, 558011728, 33109}, {849055630, 557880900, 37205},
     {445482951, 541628244, 36949}, {145130467, 541595409, 37973}, {1655906801, 554309461, 5141},
     {1916382456, 554309444, 5397}, {2025623164, 558532437, 1285}, {949890878, 558008145, 34117},
     {1479485343, 558007125, 33089}, {1748470735, 557879636, 337}, {1914408423, 558405205, 4176},
     {973973235, 558372693, 4180}, {1485218681, 558503701, 5140}, {1790126524, 21632789, 5141},
     {1916382430, 21661445, 5381}, {2059177583, 21661509, 1285}, {2023632695, 558535489, 34113},
     {2058299291, 558536529, 37185}, {2050460621, 541759312, 4432}, {2059111910, 541759316, 5200},
     {983402227, 537564948, 5204}, {447644537, 17471253, 1300}, {1790386620, 17471237, 5397},
     {1924902110, 21141317, 4437}, {2059243119, 21141313, 1349}, {2025762615, 557881169, 33877},
     {2025793435, 541628244, 37201}, {2017438669, 541595476, 37141}, {977243622, 537532245, 5204},
     {2048896755, 537532245, 5189}, {2056234873, 554338133, 5397}, {2058857404, 16942933, 5393},
     {2059120094, 558007125, 5445}, {2025697007, 557879637, 1348}, {2025762679, 557879381, 34129},
     {2050961339, 558372437, 37201}, {2050994141, 4724501, 4436}, {2057277422, 558503701, 5204},
     {2059374583, 554305285, 5205}, {2059372539, 21661509, 1301}, {2059379709, 21660481, 5397},
     {2059382270, 541229393, 4421}, {2059382527, 558534736, 5445}, {2059382655, 554210900, 33873},
     {985640895, 541759252, 38225}, {448761823, 541726485, 4372}, {180326383, 553817861, 5460},
     {1656727543, 554342149, 5205}},
    {{0, 0, 0}, {0, 0, 16}, {0, 0, 0}, {0, 0, 4}, {0, 0, 0}, {0, 0, 32769}, {0, 0, 0}, {0, 0, 0}, {0, 536870912, 4096},
     {0, 0, 0}, {0, 0, 1024}, {0, 0, 0}, {0, 0, 256}, {0, 16777216, 0}, {0, 0, 64}, {0, 4194304, 0}, {0, 0, 16},
     {0, 0, 0}, {0, 524288, 4}, {0, 0, 0}, {0, 131072, 1}, {0, 0, 0}, {0, 32768, 0}, {0, 536870912, 0}, {0, 0, 0},
     {0, 4096, 0}, {0, 0, 0}, {0, 1024, 0}, {0, 16777728, 0}, {0, 256, 0}, {0, 4194304, 0}, {0, 64, 0}, {0, 0, 0},
     {0, 524304, 0}, {0, 0, 0}, {0, 131076, 0}, {0, 0, 0}, {0, 32769, 0}, {0, 0, 0}, {1073741824, 0, 0},
     {536870912, 4096, 0}, {268435456, 1536, 0}, {134217728, 1792, 0}, {0, 512, 0}, {33554432, 256, 0}, {0, 0, 0},
     {8388608, 64, 0}, {0, 0, 0}, {2097152, 16, 0}, {1048576, 0, 0}, {524288, 4, 0}, {262144, 0, 0}, {131072, 1, 0},
     {1610678272, 0, 0}, {1879080960, 0, 0}, {939524096, 0, 0}, {268443648, 0, 0}, {134217728, 0, 0}, {2048, 0, 0},
     {33555456, 0, 0}, {512, 0, 0}, {8388864, 0, 0}, {3145856, 0, 0}, {3670080, 0, 0}, {1835040, 0, 0}, {917520, 0, 0},
     {458760, 0, 0}, {229380, 0, 0}, {65538, 0, 0}, {32769, 0, 0}, {0, 0, 0}, {8192, 0, 4096}, {3072, 0, 0},
     {3584, 0, 1024}, {1792, 0, 0}, {896, 0, 256}, {448, 0, 0}, {224, 0, 64}, {112, 0, 0}, {56, 0, 16}, {28, 0, 0},
     {14, 0, 4}, {7, 0, 0}, {3, 0, 1}, {1, 0, 4096}, {0, 0, 4096}, {0, 536870912, 5120}, {0, 0, 1024}, {0, 0, 1296},
     {0, 0, 256}, {0, 0, 324}, {0, 16777216, 64}, {0, 0, 32849}, {0, 4194304, 16}, {0, 0, 20}, {0, 536870912, 4100},
     {0, 524288, 5}, {0, 0, 1025}, {0, 131072, 1}, {0, 536870912, 256}, {0, 553680896, 0}, {0, 536870912, 64},
     {0, 4194304, 0}, {0, 4096, 16}, {0, 16777216, 0}, {0, 17302528, 4}, {0, 20972032, 0}, {0, 4325632, 1},
     {0, 4194304, 0}, {0, 557120, 0}, {0, 537395200, 0}, {0, 655376, 0}, {0, 135168, 0}, {0, 163844, 0}, {0, 33792, 0},
     {0, 16810497, 0}, {0, 4352, 0}, {1073741824, 4198400, 0}, {536870912, 5184, 0}, {268435456, 1536, 0},
     {134217728, 526096, 0}, {0, 768, 0}, {33554432, 131396, 0}, {0, 64, 0}, {8388608, 32849, 0}, {0, 16, 0},
     {1075838976, 20, 0}, {537919488, 4100, 0}, {268959744, 1541, 0}, {134479872, 1793, 0}, {1073872896, 513, 0},
     {1644232704, 256, 0}, {1879080960, 0, 0}, {947912704, 64, 0}, {402661376, 0, 0}, {169869312, 16, 0},
     {34605056, 0, 0}, {42468352, 4, 0}, {8651264, 0, 0}, {10617088, 1, 0}, {1613824128, 0, 0}, {1882751040, 0, 0},
     {941359136, 0, 0}, {269361168, 0, 0}, {134676488, 0, 0}, {231428, 0, 0}, {33653762, 0, 0}, {41473, 0, 0},
     {8397056, 0, 0}, {3156096, 0, 4096}, {3673152, 0, 0}, {1838624, 0, 1024}, {919312, 0, 0}, {459656, 0, 256},
     {229828, 0, 0}, {65762, 0, 64}, {32881, 0, 0}, {56, 0, 16}, {8220, 0, 4096}, {3086, 0, 4}, {3591, 0, 1024},
     {1795, 0, 1}, {897, 0, 4352}, {448, 0, 4096}, {224, 536870912, 5184}, {112, 0, 1024}, {56, 0, 1296}, {28, 0, 256},
     {14, 0, 324}, {7, 16777216, 64}, {3, 0, 81}, {1, 4194304, 4112}, {0, 0, 4116}, {0, 536870912, 5124},
     {0, 524288, 1029}, {0, 0, 1297}, {0, 131072, 257}, {0, 536870912, 324}, {0, 553680896, 64}, {0, 536870912, 32849},
     {0, 4194304, 16}, {0, 4096, 20}, {0, 553648128, 4100}, {0, 17302528, 5}, {0, 20972032, 1025}, {0, 4325632, 1},
     {0, 541065216, 256}, {0, 554205248, 0}, {0, 537395200, 64}, {0, 4849680, 0}, {0, 135168, 16}, {0, 16941060, 0},
     {0, 17335296, 4}, {0, 21004801, 0}, {0, 4329728, 1}, {1073741824, 4198400, 0}, {536870912, 562240, 0},
     {268435456, 537396736, 0}, {134217728, 657168, 0}, {0, 135936, 0}, {33554432, 164164, 0}, {0, 33856, 0},
     {8388608, 16810577, 16}, {0, 4368, 0}, {1075838976, 4198420, 4}, {537919488, 5188, 0}, {268959744, 1541, 32769},
     {134479872, 526097, 0}, {1073872896, 769, 0}, {1644232704, 537002308, 4096}, {1879080960, 64, 0},
     {947912704, 32849, 1024}, {402661376, 16, 0}, {1243611136, 20, 256}, {571475968, 16781316, 0},
     {310903808, 1541, 80}, {142868992, 4196097, 16}, {1084358912, 513, 4}, {1647378560, 256, 4},
     {1882751040, 524288, 32769}, {949747744, 64, 32769}, {403578896, 131072, 32768}, {170328072, 536870928, 4096},
     {34834436, 536903680, 4096}, {42566658, 4, 5120}, {8692225, 0, 1024}, {10625280, 4097, 1280},
     {1613834368, 16777216, 4368}, {1882754112, 16778240, 336}, {941362720, 4194816, 1108}, {269362960, 4194560, 84},
     {134677384, 0, 33045}, {231876, 524352, 32789}, {33653986, 524288, 32837}, {41585, 537002000, 4101},
     {8397112, 537001984, 4113}, {3156124, 536903684, 1025}, {3673166, 536903680, 1028}, {1838631, 536870913, 256},
     {919315, 553652224, 257}, {1074201481, 16781312, 4176}, {537100740, 20972544, 4176}, {268501218, 557843968, 5140},
     {134250609, 20972288, 1044}, {56, 21496064, 34069}, {33562652, 4718656, 37125}, {3086, 4849728, 33093},
     {8392199, 554303504, 37969}, {1795, 537559056, 36945}, {2098049, 541753348, 5396}, {1049024, 537034756, 5140},
     {524512, 537038849, 34117}, {262256, 17338369, 1285}, {1073872952, 16815104, 337}, {1610678300, 557979136, 4417},
     {805339150, 557848320, 84}, {402653191, 557881088, 1104}, {134225923, 558368576, 277}, {33554433, 21497664, 4436},
     {33556480, 21631824, 4165}, {8389632, 558498128, 5205}, {8389120, 21660756, 1041}, {2097408, 558006868, 1301},
     {3145856, 541229333, 260}, {1572928, 541626389, 33093}, {1074528288, 554209349, 32833}, {1611005968, 660485, 81},
     {1879244808, 558536209, 4112}, {2013364228, 553817857, 4116}, {2013298690, 558008068, 1028},
     {2046828545, 21530432, 1285}, {973086720, 21009217, 337}, {444598272, 21632848, 4433}, {1249905664, 558372688, 84},
     {580912640, 558536532, 1108}, {313524992, 541722452, 32789}, {146276736, 4359957, 33045},
     {12320960, 693061, 32773}, {1111359584, 554205509, 36933}, {1614741552, 554341457, 4097},
     {1889501208, 558011985, 5121}, {2014281740, 541234964, 5120}, {2015862790, 557881108, 1280},
     {974364675, 554207045, 1344}, {2047453185, 21501701, 33104}, {2055515136, 21632849, 4432},
     {2055351808, 21108545, 4180}, {2057383680, 21137236, 5204}, {2058391424, 21530448, 33813},
     {951586752, 4752213, 34053}, {440149984, 4854100, 33029}, {1245578224, 537530437, 37185},
     {1654589944, 537564245, 36929}, {1925154044, 537560593, 37968}, {2025816702, 537036565, 5136},
     {2025824575, 553816836, 5380}, {2050990239, 16814405, 5460}, {2017437775, 21009985, 38225},
     {2057284647, 20977489, 38229}, {2047847955, 20977424, 38228}, {2057809673, 557848404, 38229},
     {984854404, 541591364, 38229}, {448376770, 4720453, 34133}, {180137953, 537527121, 5461},
     {1111371760, 537526609, 4437}, {1656696824, 554336340, 1365}, {1891602428, 553812052, 33877},
     {952078334, 541229077, 33109}, {406824959, 557879317, 277}, {1782547455, 553684997, 36949},
     {1914677759, 558372357, 36949}, {2056236287, 558372609, 37909}, {2022157951, 557979393, 5141},
     {2057547583, 558499648, 38165}, {2050076575, 558401344, 34069}, {976793551, 558531392, 38229},
     {446443495, 558498128, 37205}, {177090547, 558534736, 38229}, {45551609, 558534740, 37973},
     {45846524, 558531604, 38229}, {12421118, 558536213, 34069}, {12493823, 558535429, 5461},
     {1614750207, 558535941, 37205}, {1883220223, 558536257, 38229}, {2015333503, 558536513, 37973},
     {2014293567, 558536464, 38229}, {2047321887, 558536528, 38165}, {973319055, 558536516, 5461},
     {436317639, 558536532, 5461}, {176205539, 558536529, 38229}, {41955185, 558536533, 5461},
     {1118842808, 558536532, 38229}, {1622675420, 558536533, 34133}, {817631214, 558536533, 34133},
     {1480460279, 558536533, 37205}, {1748960251, 558536533, 37205}, {1914667517, 558536533, 37973},
     {2047836414, 558536533, 37973}, {2022154367, 558536533, 1301}, {2055446591, 558536533, 5397},
     {2049026079, 558536533, 4421}}
};

void ZAddPoly(ZPoly &poly1, ZPoly &poly2);
void ZMulPoly(ZPoly &poly, ZPoly &poly1, ZPoly &poly2);
void zProduce(ZPoly &poly, int round, int tag);
void PrintZpoly(FILE *fp, ZPoly poly, int start);
void Pro(ZPoly &dPoly, ZPoly &sPoly, int start, int end);
void ZRepeat(ZPoly &poly);
void Shift(ZPoly &poly, int r);
void Cal(ZPoly poly);
void ZSimplify(ZPoly &poly, int start, int bound);
void ZSelect(ZPoly &poly, int base, int start, int end) {
    int len = 0;
    for (int i = 0; i < poly.length; i++) {
        int d = 0;
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 8; k++) {
                for (int l = 0; l < 32; l++) {
                    if ((poly.p[i].z[j][k] >> l) & 1) {
                        d += deg[j][k * 32 + l + base];
                    }
                }
            }
        }
        if (d >= start && d <= end) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 8; k++) {
                    poly.p[len].z[j][k] = poly.p[i].z[j][k];
                }
            }
            len++;
        }
    }
    poly.length = len;
}

int dDegree(int round, int tag, int bound);
void ZAddPoly(ZPoly &poly1, ZPoly &poly2) {
    if (poly2.length > 0) {
        int length = poly1.length + poly2.length;
        if ((poly1.p = (ZTerm *) realloc(poly1.p, length * sizeof(ZTerm))) == NULL) {
            printf("Out of Memory!");
            exit(1);
        }
        for (int i = 0; i < (poly2.length); i++) {
            for (int j = 0; j < 3; j++)
                for (int k = 0; k < 8; k++)
                    poly1.p[i + poly1.length].z[j][k] = poly2.p[i].z[j][k];
        }
        poly1.length = length;
    }
}

void ZMulPoly(ZPoly &poly, ZPoly &poly1, ZPoly &poly2) {
    //poly1 is multiplied with poly2, with the result stored in poly

    int length = 0;
    if (poly1.length > 0 && poly2.length > 0) {
        if ((poly.p = (ZTerm *) malloc(poly1.length * poly2.length * sizeof(ZTerm))) == NULL) {
            printf("Out of Memory!\n");
            exit(1);
        }
        for (int i = 0; i < poly1.length; i++) {
            for (int j = 0; j < poly2.length; j++) {
                for (int k = 0; k < 3; k++) {
                    for (int l = 0; l < 8; l++) {
                        poly.p[length].z[k][l] = (poly1.p[i].z[k][l] | poly2.p[j].z[k][l]);
                    }
                }
                length++;
            }
        }
    }
    poly.length = length;
}

void zProduce(ZPoly &poly, int round, int tag) {
    poly.p = (ZTerm *) malloc(4 * sizeof(ZTerm));
    poly.length = 4;
    for (int i = 0; i < 4; i++)
        memset(poly.p[i].z, 0, 96);
    if (tag == 0) {
        u32 ll = 1;
        int los, word, bit;
        los = round - 66;
        word = los / 32;
        bit = los % 32;
        poly.p[0].z[2][word] |= (ll << bit);
        los = round - 109;
        word = los / 32;
        bit = los % 32;
        poly.p[1].z[2][word] |= (ll << bit);
        los = round - 110;
        word = los / 32;
        bit = los % 32;
        poly.p[1].z[2][word] |= (ll << bit);
        los = round - 111;
        word = los / 32;
        bit = los % 32;
        poly.p[2].z[2][word] |= (ll << bit);
        los = round - 69;
        word = los / 32;
        bit = los % 32;
        poly.p[3].z[0][word] |= (ll << bit);
    } else if (tag == 1) {
        u32 ll = 1;
        int los, word, bit;
        los = round - 66;
        word = los / 32;
        bit = los % 32;
        poly.p[0].z[0][word] |= (ll << bit);
        los = round - 91;
        word = los / 32;
        bit = los % 32;
        poly.p[1].z[0][word] |= (ll << bit);
        los = round - 92;
        word = los / 32;
        bit = los % 32;
        poly.p[1].z[0][word] |= (ll << bit);
        los = round - 93;
        word = los / 32;
        bit = los % 32;
        poly.p[2].z[0][word] |= (ll << bit);
        los = round - 78;
        word = los / 32;
        bit = los % 32;
        poly.p[3].z[1][word] |= (ll << bit);
    } else {
        u32 ll = 1;
        int los, word, bit;
        los = round - 69;
        word = los / 32;
        bit = los % 32;
        poly.p[0].z[1][word] |= (ll << bit);
        los = round - 82;
        word = los / 32;
        bit = los % 32;
        poly.p[1].z[1][word] |= (ll << bit);
        los = round - 83;
        word = los / 32;
        bit = los % 32;
        poly.p[1].z[1][word] |= (ll << bit);
        los = round - 84;
        word = los / 32;
        bit = los % 32;
        poly.p[2].z[1][word] |= (ll << bit);
        los = round - 87;
        word = los / 32;
        bit = los % 32;
        poly.p[3].z[2][word] |= (ll << bit);
    }
}

void PrintZpoly(FILE *fp, ZPoly poly, int start) {
    for (int i = 0; i < poly.length; i++) {
        fprintf(fp, "+");
        for (int j = 0; j < 8; j++)
            for (int l = 0; l < 32; l++)
                if ((poly.p[i].z[0][j] >> l) & 1)
                    fprintf(fp, "s0[%d]", j * 32 + l + start);
        for (int j = 0; j < 8; j++)
            for (int l = 0; l < 32; l++)
                if ((poly.p[i].z[1][j] >> l) & 1)
                    fprintf(fp, "s1[%d]", j * 32 + l + start);
        for (int j = 0; j < 8; j++)
            for (int l = 0; l < 32; l++)
                if ((poly.p[i].z[2][j] >> l) & 1)
                    fprintf(fp, "s2[%d]", j * 32 + l + start);
    }
    fprintf(fp, "\n%d\n\n", poly.length);
}

void Pro(ZPoly &dPoly, ZPoly &sPoly, int start, int end) {
    dPoly.length = 0;
    dPoly.p = (ZTerm *) malloc(1 * sizeof(ZTerm));
    for (int i = 0; i < sPoly.length; i++) {
        ZPoly poly1;
        poly1.length = 1;
        poly1.p = (ZTerm *) malloc(1 * sizeof(ZTerm));
        memset(poly1.p[0].z, 0, 96);
        ZPoly poly2;
        poly2.length = 0;
        poly2.p = (ZTerm *) malloc(1 * sizeof(ZTerm));
        memset(poly2.p[0].z, 0, 96);
        ZPoly polytemp;
        polytemp.length = 0;
        polytemp.p = (ZTerm *) malloc(1 * sizeof(ZTerm));
        memset(polytemp.p[0].z, 0, 96);

        for (int j = 0; j < start; j++) {
            int word = j / 32;
            int bit = j % 32;
            for (int k = 0; k < 3; k++) {
                poly1.p[0].z[k][word] |= (((sPoly.p[i].z[k][word] >> bit) & 1) << bit);
            }
        }

        for (int j = end; j < 256; j++) {
            int word = j / 32;
            int bit = j % 32;
            for (int k = 0; k < 3; k++) {
                poly1.p[0].z[k][word] |= (((sPoly.p[i].z[k][word] >> bit) & 1) << bit);
            }
        }
        for (int j = start; j < end; j++) {
            polytemp.length = 0;
            ZAddPoly(polytemp, poly1);
            poly2.length = 0;
            int word = j / 32;
            int bit = j % 32;
            if ((sPoly.p[i].z[0][word] >> bit) & 1) {
                zProduce(poly2, j, 0);
                ZMulPoly(poly1, poly2, polytemp);
                polytemp.length = 0;
                ZAddPoly(polytemp, poly1);
            }
            if ((sPoly.p[i].z[1][word] >> bit) & 1) {
                zProduce(poly2, j, 1);
                ZMulPoly(poly1, poly2, polytemp);
                polytemp.length = 0;
                ZAddPoly(polytemp, poly1);
            }

            if ((sPoly.p[i].z[2][word] >> bit) & 1) {
                zProduce(poly2, j, 2);
                ZMulPoly(poly1, poly2, polytemp);
                polytemp.length = 0;
                ZAddPoly(polytemp, poly1);
            }

        }
        ZAddPoly(dPoly, poly1);
        poly1.length = 0;
        poly2.length = 0;
        polytemp.length = 0;
        free(poly1.p);
        free(poly2.p);
        free(polytemp.p);
        poly1.p = NULL;
        poly2.p = NULL;
        polytemp.p = NULL;
    }
}

void Shift(ZPoly &poly, int r) {
    for (int i = 0; i < poly.length; i++) {
        for (int j = 0; j < 3; j++) {
            for (int k = 7; k > (r - 1); k--) {
                poly.p[i].z[j][k] = poly.p[i].z[j][k - r];
            }
            for (int k = 0; k < r; k++)
                poly.p[i].z[j][k] = 0;
        }
    }
}

void Cal(ZPoly poly) {
    FILE *fp = fopen("cal.txt", "wb");
    int num[3][256] = {0};
    for (int i = 0; i < poly.length; i++) {
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 256; k++) {
                int word = k / 32;
                int bit = k % 32;
                if ((poly.p[i].z[j][word] >> bit) & 1)
                    num[j][k]++;
            }
        }
    }
    int max = 0, min = 255;
    for (int i = 0; i < 256; i++) {
        fprintf(fp, "%3d:", i);
        for (int j = 0; j < 3; j++) {
            fprintf(fp, "%7d", num[j][i]);
            if (num[j][i] > 0)
                max = i;
        }
        fprintf(fp, "\n");
    }
    for (int i = 255; i >= 0; i--) {
        for (int j = 0; j < 3; j++)
            if (num[j][i] > 0)
                min = i;
    }
    fprintf(fp, "%d-%d\n", min, max);
}
void ZSimplify(ZPoly &poly, int start, int bound) {
    int len = 0;
    for (int i = 0; i < poly.length; i++) {
        int d = 0;
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 8; k++) {
                for (int l = 0; l < 32; l++) {
                    if ((poly.p[i].z[j][k] >> l) & 1) {
                        d += deg[j][k * 32 + l + start];
                    }
                }
            }
        }
        if (d >= bound) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 8; k++) {
                    poly.p[len].z[j][k] = poly.p[i].z[j][k];
                }
            }
            len++;
        }
    }
    poly.length = len;
}
void ZRepeat(ZPoly &poly) {
    for (int i = 0; i < poly.length - 1; i++) {
        for (int j = i + 1; j < poly.length; j++) {
            bool tag = 1;
            for (int k = 0; k < 3; k++) {
                for (int l = 0; l < 8; l++)
                    if (poly.p[i].z[k][l] != poly.p[j].z[k][l]) {
                        tag = 0;
                        break;
                    }
            }
            if (tag) {
                for (int k = 0; k < 3; k++) {
                    memset(poly.p[i].z, 0, 96);
                    memset(poly.p[j].z, 0, 96);
                }
                break;
            }
        }
    }
    int len = 0;
    for (int i = 0; i < poly.length; i++) {
        bool tag = 0;
        for (int k = 0; k < 3; k++)
            for (int l = 0; l < 8; l++)
                if (poly.p[i].z[k][l] > 0) {
                    tag = 1;
                    break;
                }
        if (tag) {
            for (int k = 0; k < 3; k++)
                for (int l = 0; l < 8; l++)
                    poly.p[len].z[k][l] = poly.p[i].z[k][l];
            len++;
        }
    }
    poly.length = len;
}

//157627280
int main() {

    /*
    int bound=43;int base=196;
   int len=185581;int num=0;
   FILE *fr=fopen("data1.txt","rb");FILE *fw=fopen("dd1.txt","wb");
   FILE *fp=fopen("test.txt","wb");
   u32 temp[24]={0};
   int end=0;
   for(int i=0;i<end;i++)
   {
       for(int j=0;j<24;j++)
           fscanf(fr,"%u",&temp[j]);
   }
   for(int i=0;i<len;i++)
   {
       ZPoly z1,z2;
       z1.length=1;z1.p=(ZTerm *)malloc(1*sizeof(ZTerm));memset(z1.p[0].z,0,96);
       for(int j=0;j<3;j++)
           for(int k=0;k<8;k++)
               fscanf(fr,"%u",&(z1.p[0].z[j][k]));
       Pro(z2,z1,222,256);Shift(z2,1);
       ZSimplify(z2,base-32,bound);
       ZRepeat(z2);
       num +=z2.length;
       for(int j=0;j<z2.length;j++)
           for(int k=0;k<3;k++)
               for(int l=0;l<8;l++)
                   fprintf(fw,"%u ",z2.p[j].z[k][l]);
       if(z2.length>0)
       {
           z2.length=0;free(z2.p);z2.p=NULL;
       }
   }
   fprintf(fp,"%d\n",num);
   fclose(fr);fclose(fw);fclose(fp);
    */


    //182-237
    int rank;
    int size;
    MPI_Init(0, 0);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    int bound = 43;
    int base = 100;
    FILE *fr = fopen("dd21.txt", "rb");
    u32 total = 200718712;//
    u32 sp = 600;

    const int final_key;
    const int init_key = final_key * rank / 10000;


    u32 len = 0;
    if ((total % sp) == 0)
        len = total / sp;
    else
        len = total / sp + 1;
    u32 dend = rank * len;
    if (rank == (sp - 1))
        len = total - (len * (sp - 1));

    ZPoly z1;
    z1.length = 1;
    z1.p = (ZTerm *) malloc(z1.length * sizeof(ZTerm));
    memset(z1.p[0].z, 0, 96);

    u32 temp[24] = {0};

    for (u32 i = 0; i < dend; i++) {
        for (int j = 0; j < 24; j++)
            fscanf(fr, "%u", &temp[j]);
    }

    int num = 0;
    char file1[20] = {0};
    sprintf(file1, "rr21-%d.txt", rank);
    FILE *fw = fopen(file1, "wb");

    for (u32 i = 0; i < len; i++) {
        ZPoly z2;
        for (int j = 0; j < 3; j++)
            for (int k = 0; k < 8; k++)
                fscanf(fr, "%u", &(z1.p[0].z[j][k]));
        Pro(z2, z1, 238, 256);
        ZSimplify(z2, base, bound);
        ZRepeat(z2);
        //	Shift(z2,1);
        num += z2.length;
        for (int ii = 0; ii < z2.length; ii++) {
            for (int j = 0; j < 3; j++)
                for (int k = 0; k < 8; k++)
                    fprintf(fw, "%u ", z2.p[ii].z[j][k]);
        }
        if (z2.length > 0) {
            z2.length = 0;
            free(z2.p);
            z2.p = NULL;
        }
    }
    fclose(fr);

    fclose(fw);
    char file2[20] = {0};
    sprintf(file2, "tt21-%d.txt", rank);
    FILE *fp = fopen(file2, "wb");
    fprintf(fp, "%d", num);
    fclose(fp);
    MPI_Finalize();


    /*
           int rank;      int size;
      MPI_Init(0,0);
      MPI_Comm_rank(MPI_COMM_WORLD, &rank);
      MPI_Comm_size(MPI_COMM_WORLD, &size);
          int BOUND=43;int base=100;
          int len=0;
          int num=0;

          char file1[20]={0};sprintf(file1,"t%d.txt",rank);FILE *fr=fopen(file1,"rb");
          fscanf(fr,"%d",&len);fclose(fr);
          memset(file1,0,20);sprintf(file1,"r%d.txt",rank);fr=fopen(file1,"rb");
          memset(file1,0,20);sprintf(file1,"rrr%d.txt",rank);FILE *fw=fopen(file1,"wb");
          ZPoly z1;z1.length=1;z1.p=(ZTerm *)malloc(z1.length*sizeof(ZTerm));
          for(int i=0;i<len;i++)
          {
              //int start=243;int end=256;
              ZPoly z2;
              for(int j=0;j<3;j++)
                  for(int k=0;k<8;k++)
                      fscanf(fr,"%u",&(z1.p[0].z[j][k]));
              Pro(z2,z1,240,256);
              ZSimplify(z2,base,BOUND);
              ZRepeat(z2);
      //	Shift(z2,1);
              num +=z2.length;
              for(int ii=0;ii<z2.length;ii++)
              {
                  for(int j=0;j<3;j++)
                      for(int k=0;k<8;k++)
                          fprintf(fw,"%u ",z2.p[ii].z[j][k]);
              }
              if(z2.length>0)
              {
                  z2.length=0;free(z2.p);z2.p=NULL;
              }
          }
          fclose(fw);
          char file2[20]={0};sprintf(file2,"ttt%d.txt",rank);FILE *fp=fopen(file2,"wb");
          fprintf(fp,"%d",num);
          fclose(fp);
          MPI_Finalize();
      */
    return 0;
}
